/* eslint-disable @typescript-eslint/no-explicit-any */
import { JSONSchema7 } from 'json-schema'

export type PrinterBrand = 'bambu' | 'prusa' | 'creality' | 'octoprint' | string

export interface PrinterCapabilities {
  multiMaterial: boolean
  reportsTelemetry: boolean
  // Future capabilities...
}

/**
 * Base configuration for any printer. This contains only fields
 * that are guaranteed to be common across all printer types.
 */
export interface PrinterConfig {
  id: string // Internal UUID generated by the software
  name: string // User-defined name
  brand: PrinterBrand
  model: string
  nozzleSizeMm: number // User-confirmed nozzle size
  capabilities: PrinterCapabilities
  connectionConfig: PrinterConnectionData // Brand-specific connection details (IP, port, serial, etc.)
  status?: 'online' | 'offline' | 'error' | string
}

// Brand-specific connection details passed around the app.
// This is an opaque, brand-specific bag when sent to the ESP as
// `printer_connection_data`. Do not include secret references when
// sending to firmware; resolve secrets in the desktop app first.
export interface PrinterConnectionData {
  // Intentionally open for brand-specific keys
  [key: string]: any
}

/**
 * Brand-specific configuration extending the base.
 */
export type BambuConnectionData = PrinterConnectionData & {
  ipAddress: string
  port: number
  serialNumber: string
  // Secret reference stored on desktop only. Do not send to ESP.
  accessCodeSecretId?: string
  // Resolved at runtime and may be sent to ESP only during provisioning/assign.
  // Do not persist.
  accessCode?: string
}

export type BambuPrinterConfig = PrinterConfig & {
  connectionConfig: BambuConnectionData
}

/**
 * Generic, brand-agnostic telemetry data.
 */
export interface PrinterTelemetry {
  state: 'IDLE' | 'RUNNING' | 'PAUSED' | 'FINISHED' | 'CANCELLED' | 'ERROR'
  layer?: number
  totalLayers?: number
  errors?: Array<{
    code: string
    severity: 'LOW' | 'MEDIUM' | 'HIGH' | 'CRITICAL'
    message?: string
  }>
  // Brand-specific data can be sent in separate, typed events
}

export interface DiscoveredPrinter {
  ip: string
  brand: PrinterBrand
  model: string
  name: string
  serial: string
  // Brand-specific discovery data
  [key: string]: any
}

/**
 * A validated config is a complete PrinterConfig that has been successfully tested
 * for connectivity. The validation process is responsible for populating any
 * fields in `connectionConfig` that were discovered during the test (e.g., serial number).
 */
export type ValidatedConfig = PrinterConfig

/**
 * The payload sent from the frontend to the backend for validation.
 * It contains the partial config and any transient secrets needed for the connection test.
 */
export type ValidationPayload = Partial<PrinterConfig> & {
  accessCode?: string
}

export type PrinterConnection = any

export type PrinterConfigSchema = JSONSchema7

export type PrinterCommand =
  | { command: 'setLight'; on: boolean }
  | { command: 'retractFilament' }
  | { command: 'cutAndRetractFilament' }
  | { command: 'filamentSwap' }
  | { command: 'home' }
  | { command: 'moveBaseToZ'; height: number }
  | { command: 'moveHeadToZ'; height: number }
  | { command: 'setHotendTemp'; temperature: number }
  | { command: 'setBedTemp'; temperature: number }
  | { command: 'moveToChuteArea' }
  | { command: 'cutFilament' }
  | { command: 'wipeNozzle' }
